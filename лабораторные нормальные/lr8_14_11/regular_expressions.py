from msilib.schema import Class
import pickle
from typing import NamedTuple    
from collections import namedtuple
from typing import TypeVar, Generic, List
import getpass
import re


class Otdelbl(): #–ö–ª–∞—Å—Å - –æ—Ç–¥–µ–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –ö–ª–∞—Å—Å "–û—Ç–¥–µ–ª—ã" —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞, —ç—Ç–∞–∂, —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞.
    def __init__(self, nazv_otd, floor, phone, nath_otd):
        self.nazv_otd = nazv_otd
        self.floor = floor
        self.phone = phone
        self.nath_otd = nath_otd


    def Nachalinik(self):
        print(f"–ù–∞—á–∞–ª—å–Ω–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞ - {self.nath_otd}")

    #–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    #def __del__(self): #–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        #print(f"–ù–∞ —ç—Ç–∞–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ç–¥–µ–ª–æ–º {self.nazv_otd} –≤–ª–µ—Ç–µ–ª–∞ —Ä–∞–∫–µ—Ç–∞ –ö–∞–ª–∏–±—Ä")

#–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    def serialize(self): # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        with open('D:\\Code_all\\MDK_0101\\–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ\\lr4_12_10\\cock.pkl', 'wb') as f:
            pickle.dump(self.phone, f)
        f.closed

#–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    def deserialize(self): #–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        with open('D:\\Code_all\\MDK_0101\\–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ\\lr4_12_10\\cock.pkl', 'rb') as f:
            cock = pickle.load(f)
        f.closed
        print (cock)

class Sotrydniki(): #–ö–ª–∞—Å—Å "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞, —ç—Ç–∞–∂, —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞.
    def __init__(self, FIO, doljnost, nomer_otdela, pol_M_or_J, adress, date_birth):
        self.FIO = FIO
        self.doljnost = doljnost #–î–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã,–∏–Ω–∂–µ–Ω–µ—Ä—ã, —Ç–µ—Ö–Ω–∏–∫–∏, –ª–∞–±–æ—Ä–∞–Ω—Ç—ã, 
                                 #–ø—Ä–æ—á–∏–π –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª)
        self.nomer_otdela = nomer_otdela
        self.pol_M_or_J = pol_M_or_J
        self.adress = adress
        self.date_birth = date_birth 
        
    def Nama(self):
        return self.FIO

class Organizatsia(): #–ö–ª–∞—Å—Å "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å, –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.
    def __init__(self, nazvanie_org, type_deyatelnosti, country, city, adres, FIO_directora):
        self.nazvanie_org = nazvanie_org
        self.type_deyatelnosti = type_deyatelnosti
        self.country = country
        self.city = city
        self.adres = adres
        self.FIO_directora = FIO_directora
    def Name(self):
        print(f'–¢–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:{self.type_deyatelnosti}')


#–ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
class Input_system():
    count = 1

    def __init__(self) -> None:
        self.nik = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        self.pas = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        pattern_password =r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%?&])[A-Za-z\d@$!%*?&]{8,}$"
        invalid_pass_text = \
        "–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É, —Ü–∏—Ñ—Ä—É –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
        if (re.search(pattern_password, self.pas)):
            print("–î–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Çüê±‚Äçüë§üê±‚Äçüêâ")
        else:
            print(f"–î–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: {self.pas}.", f"{invalid_pass_text}", sep='\n')
        Input_system.count +=1
#–ö–æ–Ω–µ—Ü –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    

class Dogovor(): #–ö–ª–∞—Å—Å "–î–æ–≥–æ–≤–æ—Ä" —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞, –¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∞.
    def __init__(self, nomer_dogovora, data_zakl, organizatsia, stoimost_dogovora):
        self.nomer_dogovora = nomer_dogovora
        self.data_zakl = data_zakl
        self.organizatsia = organizatsia
        self.stoimost_dogovora = stoimost_dogovora

#–ù–∞—á–∞–ª–æ –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

T = TypeVar('T')
class Add_Documentologist(Generic[T]):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: —Å–ø–∏—Å–æ–∫ —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö T"""
    def __init__(self) -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –æ–±—ä–µ—Ç–∞–º–∏ —Ç–∏–ø–∞ T
        self.items: List[T] = []

    #–í—ã–≤–æ–¥ –≤—ã–±–æ—Ä–∞ —á–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ª–∞
    def __call__(self, nm):
        print(f'–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - {nm.organizatsia}')

    # –í–≤–æ–¥ –≤ stack
    def push(self, item: T) -> None:
        self.items.append(item)
    # –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    def pop(self, x) -> T:
        return self.items.pop(x)
    # –ü—É—Å—Ç–æ–π –∏–ª–∏ —Å —á–µ–º-—Ç–æ(true/false)
    def empty(self) -> bool:
        print(not self.items)
    #–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –≤ stack
    def info(self) -> None:
        print(self.items)
#–ö–æ–Ω–µ—Ü –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞



# –ù–∞—á–∞–ª–æ namedtuple
# Journale = namedtuple('Journale', 'name pages type')
# Jour1 = Journale(name="Forbes", pages=210, type="Economic")
# Jour2 = Journale(name="Economic analysis", pages=160, type="Finance")
# Jour3 = Journale(name="Funny pictures", pages=80, type="Funny")
# Jour4 = Journale(name="Culinary magazine Gastronomy", pages=55, type="Food")
# print(Jour1.name, Jour2, Jour3.pages, Jour4, sep='\n')
#–ö–æ–Ω–µ—Ü namedtuple


#–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    #–î–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ –ø—Ä–∏–ø–∏—Å–∞–Ω –∫ –∫–ª–∞—Å—Å—É <<–ñ—É—Ä–Ω–∞–ª>>
#class Journal(NamedTuple):
    # """–ö–ª–∞—Å—Å "–∂—É—Ä–Ω–∞–ª" —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: –Ω–æ–º–µ—Ä –∂—É—Ä–Ω–∞–ª–∞, –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ"""
    # number_journal: int
     #number_page: int
    # number_lines: int
     #number_cell: int


#def Get_Journal() -> Journal:
     #return '–ñ—É—Ä–Ω–∞–ª'

#def Get_Journal() -> Journal:
     #return 

    #–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏—è –∫–æ—Ä—Ç–µ–∂–∞ –¥–ª–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

class Proekt_rab(): #–ö–ª–∞—Å—Å "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞" —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞, –æ—Ç–¥–µ–ª, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.
    def __init__(self, data_nachala_rabot, data_zaversheniya_rabot, nomer_dogovor, otdel_razrabotki):
        self.data_nachala_rabot = data_nachala_rabot
        self.data_zaversheniya_rabot = data_zaversheniya_rabot
        self.nomer_dogovor = nomer_dogovor
        self.otdel_razrabotki = otdel_razrabotki

#–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
 
class Budget(Organizatsia):
    def __init__(self,nazvanie_org,type_deyatelnosti,country,city,adres,FIO_directora,size): 
        super().__init__(nazvanie_org,type_deyatelnosti,country,city,adres,FIO_directora)
        self.size = size
    def Name(self):  
        print(f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:{self.nazvanie_org}')

    

#–≠–∫–∑–µ–º–ø–ª—è—Ä—ã

o1 = Otdelbl("Calibr",4,"Redmi","–ó–∏–º–∏–Ω –í–∏–∫—Ç–æ—Ä –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á")
o2 = Otdelbl("Bread", 1, "Xiaomi", "–õ–µ—Å–æ–≤–æ–π –í–∞—Å–∏–ª–∏–π –ë–∞—Ç—å–∫–æ–≤–∏—á")
r1 = Organizatsia("–•–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—è","–ü–æ–≤–∞—Ä","–†–æ—Å—Å–∏—è","–ù–æ–≤–æ–¥–≤–∏–Ω—Å–∫","–ú–∏—Ä–∞ 13","–®–∞—Ä–∏–ø–æ–≤ –ù–∏–∫–∏—Ç–∞ –û–ª–µ–≥–æ–≤–∏—á")
#r1.Name()
r1 = Budget(r1.nazvanie_org,r1.type_deyatelnosti,r1.country,r1.city,r1.adres,r1.FIO_directora,5)
s1 = Sotrydniki("–ó–∏–º–∏–Ω –î–∞–Ω–∏–ª–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á","–õ–∞–±–æ—Ä–∞–Ω—Ç", 2 ,"–ú","–ü—É—à–∫–∏–Ω–∞ 25", "07.07.2002")
d1 = Dogovor("90080706","17.12.2003",r1.nazvanie_org,25000)
#print(s1.Nama())
#o1.Nachalinik()
#o2.Nachalinik()
#del o1

#o2.serialize()
#o2.deserialize()

#–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
#r1.Name()

#–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
# stack = Add_Documentologist[str]()
# stack(d1)
# stack.push("–î–∞–Ω–∏–ª–∞")
# stack.push(7)
# stack.empty()
# stack.push("–§–∏–ª–∏–ø–ø")
# stack.push("–ù–∏–∫–∏—Ç–∞")
# stack.pop(1)
# #stack.info()
#–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞    


#–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–µ–∂–µ–π
#Journal1 = Journal(57, 98, 480, 1500)
#Journal2 = Journal(12, 300, 740, 3424)
#print(f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏:", Journal1)
#print(f"–ñ—É—Ä–Ω–∞–ª:", Journal1.number_journal)
#print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞:", Journal1.number_page) 
#print(f"–°—Ç—Ä–æ–∫–∞:", Journal1.number_lines) 
#print(f"–Ø—á–µ–π–∫–∞:", Journal1.number_cell) 
#print(f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏:", Journal2)

#–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–µ–∂–µ–π

#–ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
user1 = Input_system()
user2 = Input_system()
#–ö–æ–Ω–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
